Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]


Link to problem: https://leetcode.com/problems/rotate-array/description/

Solution:

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        if(k==0){
            return;
        }
        k=k%n;
        if(k>n){
            return;
        }
        vector<int> temp(k);
        for(int i=n-k;i<n;i++){
            temp[i-(n-k)] = nums[i];//moved last k elements to temp
        }
        for(int i=n-k-1;i>=0;i--){
            nums[i+k] = nums[i];
        }
        for(int i=0;i<k;i++){
            nums[i]=temp[i];
        }
    }
};
